//-------------------------------------------------------------------------
//
// Situation Outbreak Two - CUSTOM HAMMER FGD
//
//-------------------------------------------------------------------------

@include "cstrike.fgd"

@BaseClass base(Targetname, Angles, EnableDisable) iconsprite("editor/npc_maker.vmt") color(0 0 255) = BaseNPCMaker
[
	StartDisabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) = 
	[
		// Only in npc__maker, npc_template_maker uses flag from template NPC
		16 : "Fade Corpse" : 1
		32 : "Infinite Children" : 1
		64 : "Do Not Drop" : 0
		128 : "Don't Spawn While Visible" : 0
	]

	MaxNPCCount(integer) : "Num. of NPCs" : 10 : "Number of NPCs that will spawn before this spawner is exhausted."
	SpawnFrequency(string) : "Frequency" : "3" : "How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies."
	MaxLiveChildren(integer) : "Max Live NPCs" : 10 : "Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied."
	NPCSquadname(string) : "Childrens' Squad Name" : "npcs"

	// Outputs
	output OnSpawnNPC(string) : "Fired when an NPC is spawned. The activator is the NPC, and the string is the name of the NPC." 
	output OnAllSpawned(void) : "Fired when the spawned is exhausted (all children have been spawned)."
	output OnAllSpawnedDead(void) : "Fired when the spawner is exhausted (all children have been spawned) and all spawned children have died."
	output OnAllLiveChildrenDead(void) : "Fired when all spawned children have died. This does not mean the spawned is exhausted, so a new child may be spawned any time after this (unless the maker is disabled)."

	// Inputs
	input Spawn(void) : "Spawns an NPC."
	input Toggle(void) : "Toggles the spawner enabled/disabled state."
	input Enable(void) : "Enables the spawner."
	input Disable(void) : "Disables the spawner."
	input AddMaxChildren(integer) : "Adds to the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still wont begin spawning until it is re-enabled with the Enable input."
	input SetMaxChildren(integer) : "Sets the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still won't begin spawning until it is re-enabled with the Enable input."
	input SetMaxLiveChildren(integer) : "Sets the maximum number of NPCs that can be alive at any one time from this spawner."
	input SetSpawnFrequency(float) : "Sets how often (in seconds) a new NPC will be spawned."
]

@PointClass base(Angles, BaseNPCMaker) iconsprite("editor/npc_maker.vmt") = so_zombie_spawner : 
	"Spawns a specified or random type of zombie NPC."
[
	NPCTypeRandom(choices) : "Randomize Type of Zombie Spawned?" : 0 : "If yes, a random type of zombie NPC will be spawned. Overrides the 'Type of Zombie to Spawn' property." =
	[
		0 : "No"
		1 : "Yes"
	]

	NPCType(choices) : "Type of Zombie to Spawn" : "npc_creeper" : "Defines what type of zombie NPC will be spawned by this spawner entity." =
	[
		"npc_creeper" : "Creeper"
	]
	
	rallypointName(string) : "Rally Point" : "" : "(OPTIONAL) Name of the so_zombie_spawner_rallypoint entity that zombie NPCs should move to when they spawn."
]

@PointClass base(Targetname) iconsprite("editor/bullseye.vmt") = so_zombie_spawner_rallypoint : 
	"An optional rally point for all NPC spawners that can be used to force NPCs to move towards this point entity's origin when they spawn."
[
]
